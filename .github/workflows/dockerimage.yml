name: Push Docker Images on Changes

on: [push]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Login to Docker Registry
      run: echo ${{ secrets.docker_token }} | docker login -u ${{ secrets.docker_login }} --password-stdin
    - name: Build and submit release for Maven Postgresql CI
      run: |
        # compute sha256 for the filesystem
        # note that we should supply sha256: prefix to keep convention
        echo -n sha256: > digest_file
        dir=maven-postgresql; find "$dir" -type f -exec sha256sum {} \; | sed "s~$dir~~g" | sort -d | sha256sum | cut -d ' ' -f 1 >> digest_file
        docker pull relizaio/reliza-go-client
        echo Digest:
        echo $(cat digest_file)
        # call reliza and see if this file system artifact was already registered before
        docker run --rm relizaio/reliza-go-client checkhash  \
          -i ${{ secrets.RELIZA_MAVEN_POSTGRESQL_API_ID }} -k ${{ secrets.RELIZA_MAVEN_POSTGRESQL_API_KEY }} --hash $(cat digest_file) > reliza_hash_check 2>&1
        echo "Response from Reliza:"
        check=$(cat reliza_hash_check)
        echo $check
        # little sleep is needed to make sure GitHub Actions calculates if condition correctly
        sleep 2
        # now only create new release if no release was found with same hash
        if [ "$check" == "{}" ]
        then
          # obtain version
          docker run --rm relizaio/reliza-go-client getversion \
            -i ${{ secrets.RELIZA_MAVEN_POSTGRESQL_API_ID }} -k ${{ secrets.RELIZA_MAVEN_POSTGRESQL_API_KEY }} -b $GITHUB_REF > full_version_output 2>&1
          echo "Version response:"
          cat full_version_output
          # now construct actual version variable
          vvar=$(cat full_version_output | jq -r ".version")
          vvar_tag=$(cat full_version_output | jq -r ".dockerTagSafeVersion")
          # build and push docker image
          docker build . --file maven-postgresql/Dockerfile -t relizaio/maven-postgresql:$vvar_tag -t relizaio/maven-postgresql:latest \
           --build-arg VERSION=$vvar --build-arg CI_ENV=github$GITHUB_SHA --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=$GITHUB_REF
          docker_sha_256=$(docker push relizaio/maven-postgresql:$vvar_tag | grep sha256 | cut -f 3 -d ' ')
          # push latest also
          docker push relizaio/maven-postgresql:latest
          # finally stream our release metadata back to Reliza
          docker run --rm relizaio/reliza-go-client addrelease -b $GITHUB_REF --commit $GITHUB_SHA -v $vvar \
            -i ${{ secrets.RELIZA_MAVEN_POSTGRESQL_API_ID }} -k ${{ secrets.RELIZA_MAVEN_POSTGRESQL_API_KEY }} --artid reliza-backend-playground-$vvar \
            --artbuildid github$GITHUB_ACTION$GITHUB_SHA --artcimeta GitHub Actions --arttype file_system --artdigests $(cat digest_file) \
            --artid relizaio/maven-postgresql --artbuildid github$GITHUB_ACTION$GITHUB_SHA --artcimeta GitHub Actions --arttype Docker \
            --artdigests $docker_sha_256
        else
          echo "Artifact is already part of another release, not duplicating"
        fi
    - name: Build and submit release for JQ
      run: |
        # compute sha256 for the filesystem
        # note that we should supply sha256: prefix to keep convention
        echo -n sha256: > digest_file
        dir=jq; find "$dir" -type f -exec sha256sum {} \; | sed "s~$dir~~g" | sort -d | sha256sum | cut -d ' ' -f 1 >> digest_file
        docker pull relizaio/reliza-go-client
        echo Digest:
        echo $(cat digest_file)
        # call reliza and see if this file system artifact was already registered before
        docker run --rm relizaio/reliza-go-client checkhash  \
          -i ${{ secrets.RELIZA_JQ_API_ID }} -k ${{ secrets.RELIZA_JQ_API_KEY }} --hash $(cat digest_file) > reliza_hash_check 2>&1
        echo "Response from Reliza:"
        check=$(cat reliza_hash_check)
        echo $check
        # little sleep is needed to make sure GitHub Actions calculates if condition correctly
        sleep 2
        # now only create new release if no release was found with same hash
        if [ "$check" == "{}" ]
        then
          # obtain version
          docker run --rm relizaio/reliza-go-client getversion \
            -i ${{ secrets.RELIZA_JQ_API_ID }} -k ${{ secrets.RELIZA_JQ_API_KEY }} -b $GITHUB_REF > full_version_output 2>&1
          echo "Version response:"
          cat full_version_output
          # now construct actual version variable
          vvar=$(cat full_version_output | jq -r ".version")
          vvar_tag=$(cat full_version_output | jq -r ".dockerTagSafeVersion")
          # build and push docker image
          cd jq
          docker build . -t relizaio/jq:$vvar_tag -t relizaio/jq:latest \
           --build-arg VERSION=$vvar --build-arg CI_ENV=github$GITHUB_SHA --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=$GITHUB_REF
          docker_sha_256=$(docker push relizaio/jq:$vvar_tag | grep sha256 | cut -f 3 -d ' ')
          # push latest also
          docker push relizaio/jq:latest
          # finally stream our release metadata back to Reliza
          cd ..
          docker run --rm relizaio/reliza-go-client addrelease -b $GITHUB_REF --commit $GITHUB_SHA -v $vvar \
            -i ${{ secrets.RELIZA_JQ_API_ID }} -k ${{ secrets.RELIZA_JQ_API_KEY }} --artid reliza-backend-playground-$vvar \
            --artbuildid github$GITHUB_ACTION$GITHUB_SHA --artcimeta GitHub Actions --arttype file_system --artdigests $(cat digest_file) \
            --artid relizaio/jq --artbuildid github$GITHUB_ACTION$GITHUB_SHA --artcimeta GitHub Actions --arttype Docker \
            --artdigests $docker_sha_256
        else
          echo "Artifact is already part of another release, not duplicating"
        fi
    - name: Build and submit release for AWS CLI v1
      run: |
        # compute sha256 for the filesystem
        # note that we should supply sha256: prefix to keep convention
        echo -n sha256: > digest_file
        dir=awscli; find "$dir" -type f -exec sha256sum {} \; | sed "s~$dir~~g" | sort -d | sha256sum | cut -d ' ' -f 1 >> digest_file
        docker pull relizaio/reliza-go-client
        echo Digest:
        echo $(cat digest_file)
        # call reliza and see if this file system artifact was already registered before
        docker run --rm relizaio/reliza-go-client checkhash  \
          -i ${{ secrets.RELIZA_AWSCLI_API_ID }} -k ${{ secrets.RELIZA_AWSCLI_API_KEY }} --hash $(cat digest_file) > reliza_hash_check 2>&1
        echo "Response from Reliza:"
        check=$(cat reliza_hash_check)
        echo $check
        # little sleep is needed to make sure GitHub Actions calculates if condition correctly
        sleep 2
        # now only create new release if no release was found with same hash
        if [ "$check" == "{}" ]
        then
          # obtain version
          docker run --rm relizaio/reliza-go-client getversion \
            -i ${{ secrets.RELIZA_AWSCLI_API_ID }} -k ${{ secrets.RELIZA_AWSCLI_API_KEY }} -b $GITHUB_REF > full_version_output 2>&1
          echo "Version response:"
          cat full_version_output
          # now construct actual version variable
          vvar=$(cat full_version_output | jq -r ".version")
          vvar_tag=$(cat full_version_output | jq -r ".dockerTagSafeVersion")
          # build and push docker image
          cd awscli
          docker build . -t relizaio/awscli:$vvar_tag -t relizaio/awscli:latest \
           --build-arg VERSION=$vvar --build-arg CI_ENV=github$GITHUB_SHA --build-arg GIT_COMMIT=$GITHUB_SHA --build-arg GIT_BRANCH=$GITHUB_REF
          docker_sha_256=$(docker push relizaio/awscli:$vvar_tag | grep sha256 | cut -f 3 -d ' ')
          # push latest also
          docker push relizaio/awscli:latest
          # finally stream our release metadata back to Reliza
          cd ..
          docker run --rm relizaio/reliza-go-client addrelease -b $GITHUB_REF --commit $GITHUB_SHA -v $vvar \
            -i ${{ secrets.RELIZA_AWSCLI_API_ID }} -k ${{ secrets.RELIZA_AWSCLI_API_KEY }} --artid reliza-backend-playground-$vvar \
            --artbuildid github$GITHUB_ACTION$GITHUB_SHA --artcimeta GitHub Actions --arttype file_system --artdigests $(cat digest_file) \
            --artid relizaio/awscli --artbuildid github$GITHUB_ACTION$GITHUB_SHA --artcimeta GitHub Actions --arttype Docker \
            --artdigests $docker_sha_256
        else
          echo "Artifact is already part of another release, not duplicating"
        fi